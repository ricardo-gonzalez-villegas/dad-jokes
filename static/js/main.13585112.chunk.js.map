{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","class","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","joke","handleClick","bind","setState","getJokes","length","numJokes","axios","get","headers","Accept","response","newJoke","data","has","push","id","uuid","st","setItem","stringify","alert","delta","sort","a","b","src","alt","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13585112.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Joke.css';\n\nclass Joke extends Component {\n  getColor() {\n    if (this.props.votes >= 15) {\n      return '#4CAF50';\n    } else if (this.props.votes >= 12) {\n      return '#8BC34A';\n    } else if (this.props.votes >= 9) {\n      return '#CDDC39';\n    } else if (this.props.votes >= 6) {\n      return '#FFEB3B';\n    } else if (this.props.votes >= 3) {\n      return '#FFC107';\n    } else if (this.props.votes >= 0) {\n      return '#FF9800';\n    } else {\n      return '#f44336';\n    }\n  }\n\n  getEmoji() {\n    if (this.props.votes >= 15) {\n      return 'em em-rolling_on_the_floor_laughing';\n    } else if (this.props.votes >= 12) {\n      return 'em em-laughing';\n    } else if (this.props.votes >= 9) {\n      return 'em em-smiley';\n    } else if (this.props.votes >= 6) {\n      return 'em em-slightly_smiling_face';\n    } else if (this.props.votes >= 3) {\n      return 'em em-neutral_face';\n    } else if (this.props.votes >= 0) {\n      return 'em em-confused';\n    } else {\n      return 'em em-angry';\n    }\n  }\n\n  render() {\n    return (\n      <div className='Joke'>\n        <div className='Joke-buttons'>\n          <i className='fas fa-arrow-up' onClick={this.props.upvote} />\n          <span style={{ borderColor: this.getColor() }} className='Joke-votes'>\n            {this.props.votes}\n          </span>\n          <i className='fas fa-arrow-down' onClick={this.props.downvote} />\n        </div>\n        <div className='Joke-text'>{this.props.text}</div>\n        <div className='Joke-smiley'>\n          <i class={this.getEmoji()}></i>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","import React, { Component } from 'react';\nimport Joke from './Joke';\nimport axios from 'axios';\nimport { v4 as uuid } from 'uuid';\nimport './JokeList.css';\n\nconst API_URL = 'https://icanhazdadjoke.com/';\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokes: 10,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: JSON.parse(window.localStorage.getItem('jokes') || '[]'),\n      loading: false,\n    };\n    this.seenJokes = new Set(this.state.jokes.map((joke) => joke.text));\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ loading: true }, this.getJokes);\n  }\n\n  async getJokes() {\n    try {\n      let jokes = [];\n      while (jokes.length < this.props.numJokes) {\n        let response = await axios.get(API_URL, {\n          headers: { Accept: 'application/json' },\n        });\n        let newJoke = response.data.joke;\n        if (!this.seenJokes.has(newJoke)) {\n          jokes.push({ id: uuid(), text: newJoke, votes: 0 });\n        }\n      }\n      this.setState(\n        (st) => ({\n          loading: false,\n          jokes: [...st.jokes, ...jokes],\n        }),\n        () =>\n          window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\n      );\n    } catch (error) {\n      alert(error);\n      this.setState({loading: false});\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n\n  handleVote(id, delta) {\n    this.setState(\n      (st) => ({\n        jokes: st.jokes.map((joke) =>\n          joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\n        ),\n      }),\n      () =>\n        window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className='JokeList-spinner'>\n          <i className='far fa-8x fa-laugh fa-spin' />\n          <h1 className='JokeList-title'>Loading...</h1>\n        </div>\n      );\n    }\n    let jokes = this.state.jokes.sort((a,b) => b.votes - a.votes);\n    return (\n      <div className='JokeList'>\n        <div className='JokeList-sidebar'>\n          <h1 className='JokeList-title'>\n            <span>Dad</span> Jokes\n          </h1>\n          <img\n            src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'\n            alt='smiley-face'\n          />\n          <button className='JokeList-getmore' onClick={this.handleClick}>\n            Fetch Jokes\n          </button>\n        </div>\n        <div className='JokeList-jokes'>\n          {jokes.map((joke) => (\n            <Joke\n              key={joke.id}\n              votes={joke.votes}\n              text={joke.text}\n              upvote={() => this.handleVote(joke.id, 1)}\n              downvote={() => this.handleVote(joke.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n","import React, { Component } from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <JokeList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}